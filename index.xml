<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>立波吞</title><link>https://libitum.github.io/</link><description>Recent content on 立波吞</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 20 Jun 2017 23:23:00 +0800</lastBuildDate><atom:link href="https://libitum.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Django Api 服务之实现默认的 login_required</title><link>https://libitum.github.io/posts/django-login-required/</link><pubDate>Tue, 20 Jun 2017 23:23:00 +0800</pubDate><guid>https://libitum.github.io/posts/django-login-required/</guid><description>Background 我们在使用 Django 做 Api 开发时，基本所有接口都需要认证。这种情况下，如果使用 Django 原生的 login_required 就会显得非常麻烦，每个接口上都需要添加这个装饰器。
因此，需要能够实现一个默认的 『login_required』，默认将所有接口都加上登录校验，而只将一些特殊的接口例外。
Solution 使用 Django Middleware 来实现登录校验
from django.http.response import HttpResponseForbidden from django.conf import settings class LoginRequiredMiddleWare(object): def __init__(self, get_response): self.get_response = get_response def __call__(self, request): # 判断是否已经登录。这里依赖于 SessionMiddleware # 和 AuthenticationMiddleWare 做自动认证 if hasattr(request, &amp;#39;user&amp;#39;) and not request.user.is_authenticated: ignore = False for prefix in settings.AUTH_FREE_URL_PREFIX: if request.path.startswith(prefix): ignore = True break if ignore is False: # 如果未登录且没有设置忽略，则直接返回 503 return HttpResponseForbidden() # 正常处理请求 response = self.</description></item></channel></rss>